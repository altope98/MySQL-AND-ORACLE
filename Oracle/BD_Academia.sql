--SOLUCIONES EJERCICIO ORACLE ACADEMIA
drop table alumnos;
drop table practicos;
drop table teoricos;
drop table test;
CREATE TABLE Alumnos (
cCodAlu VARCHAR2(13) PRIMARY KEY,
cNomAlu VARCHAR2(100),
dFecNac DATE,
Localidad 
VARCHAR2(50),
nTestAprobados 
NUMBER(10, 0) DEFAULT 0,
nPractAprobadas NUMBER(10, 0) DEFAULT 0
);

CREATE TABLE Practicos (
cCodAlu VARCHAR2(13) NOT NULL ,
FechaPract 
DATE NOT NULL ,
Matricula 
VARCHAR (10),
nFallosGraves 
NUMBER(10, 0) DEFAULT 0,
nFallosLeves 
NUMBER(10, 0) DEFAULT 0,
CONSTRAINT PK_e_Practicos PRIMARY KEY (cCodAlu,FechaPract)
);

CREATE TABLE Teoricos (
cCodAlu VARCHAR2(13) NOT NULL ,
nNumTest 
NUMBER(10, 0) NOT NULL ,
FechaTest 
DATE NOT NULL ,
nAciertos 
NUMBER(10, 0) DEFAULT 0,
nFallos NUMBER(10, 0) DEFAULT 0,
CONSTRAINT PK_e_Teoricos PRIMARY KEY (cCodAlu,nNumTest,FechaTest)
);

CREATE TABLE Test (
nNumTest NUMBER(10, 0) NOT NULL,
Tema VARCHAR2(100) NOT NULL ,
nPreguntas NUMBER(10, 0) DEFAULT 0,
CONSTRAINT PK_Test PRIMARY KEY (nNumTest)
);


--1
--A
ALTER TABLE PRACTICOS ADD CONSTRAINT fk_PRACTICOS_ALUMNOS FOREIGN KEY (CCODALU) REFERENCES ALUMNOS(CCODALU);
ALTER TABLE TEORICOS ADD CONSTRAINT fk_TEORICOS_ALUMNOS FOREIGN KEY (CCODALU) REFERENCES ALUMNOS(CCODALU);
ALTER TABLE TEORICOS ADD CONSTRAINT fk_TEORICOS_TEST FOREIGN KEY (NNUMTEST) REFERENCES TEST(NNUMTEST);
--B
ALTER TABLE PRACTICOS MODIFY FECHAPRACT DEFAULT SYSDATE;
ALTER TABLE TEORICOS MODIFY FECHATEST DEFAULT SYSDATE;
ALTER TABLE ALUMNOS MODIFY DFECNAC DEFAULT SYSDATE;

--C
ALTER TABLE PRACTICOS ADD NFALLOS NUMBER(10,0);

--D
ALTER TABLE PRACTICOS ADD CONSTRAINT ck_NFALLOS CHECK (NFALLOS <= (NFALLOSGRAVES+NFALLOSLEVES));

--E
ALTER TABLE TEORICOS ADD APROBADOSN VARCHAR2(1);

--F
ALTER TABLE TEORICOS MODIFY APROBADOSN DEFAULT 'N';
ALTER TABLE TEORICOS ADD CONSTRAINT ck_APROBADOSN CHECK (APROBADOSN IN  ('S','N'));





INSERT INTO TEST VALUES (1,'SEGURIDAD',35);
INSERT INTO TEST VALUES (2,'MOTOR',40);
INSERT INTO TEST VALUES (3,'SEGURIDAD',45);

INSERT INTO ALUMNOS VALUES ('GR01','ANTONIO LOPEZ',SysDate,'GRANADA',2,0);
INSERT INTO ALUMNOS VALUES ('GR02','ROSA BENITEZ ',SysDate,'GRANADA',1,1);
INSERT INTO ALUMNOS VALUES ('JA01','MANOLO ROMERO',SysDate,'JAEN',1,1);
INSERT INTO ALUMNOS VALUES ('JA02','ISABEL RODRIG',SysDate,'JAEN',1,0);


INSERT INTO PRACTICOS VALUES ('GR01','01/12/2008','C1',0,4,4);
INSERT INTO PRACTICOS VALUES ('GR02','01/12/2008','C2',0,1,1);
INSERT INTO PRACTICOS VALUES ('GR02','02/12/2008','C3',1,0,1);
INSERT INTO PRACTICOS VALUES ('JA01','03/12/2008','C2',0,0,0);
INSERT INTO PRACTICOS VALUES ('JA02','04/12/2008','C4',1,1,2);


INSERT INTO TEORICOS VALUES ('GR01',1,'01/01/2008',22,8);
INSERT INTO TEORICOS VALUES ('GR01',2,'01/02/2008',40,0);
INSERT INTO TEORICOS VALUES ('GR01',3,'01/03/2008',40,5);
INSERT INTO TEORICOS VALUES ('GR02',3,'01/01/2008',40,5);
INSERT INTO TEORICOS VALUES ('JA01',2,'01/03/2008',40,0);
INSERT INTO TEORICOS VALUES ('JA02',3,'01/02/2008',42,3);
INSERT INTO TEORICOS VALUES ('JA02',2,'01/02/2008',35,5);

--2
--A 
/*Alumnos que han realizado practicas en coches que no han sido utilizados 
para las prácticas de los alumnos de GRANADA.*/
SELECT A.*
FROM ALUMNOS A
INNER JOIN PRACTICOS P ON P.CCODALU=A.CCODALU
WHERE MATRICULA NOT IN(
  SELECT MATRICULA
  FROM PRACTICOS P
  INNER JOIN ALUMNOS A ON A.CCODALU = P.CCODALU
  WHERE LOCALIDAD='GRANADA');

--B
/*Alumnos que solo han realizado test con más de 40 preguntas.*/
SELECT A.*
FROM ALUMNOS A
INNER JOIN TEORICOS T ON A.CCODALU = T.CCODALU
MINUS
SELECT A.*
FROM ALUMNOS A
INNER JOIN TEORICOS T ON A.CCODALU = T.CCODALU
INNER JOIN TEST ON TEST.NNUMTEST=T.NNUMTEST
WHERE NPREGUNTAS <= 40;

--C
/*Listado con los diferentes Temas de los test y número de realizaciones de los anteriores
en cada mes de cada año con el siguiente formato :  Tema - Año - Mes - Nº Realizados*/
SELECT TEMA, TO_CHAR(FECHATEST,'YYYY') AS AÑO, TO_CHAR(FECHATEST,'MONTH') AS MES, COUNT(T.NNUMTEST) AS NUM_REALIZADOS
FROM TEST TS
INNER JOIN TEORICOS T ON T.NNUMTEST = TS.NNUMTEST
GROUP BY TEMA, TO_CHAR(FECHATEST,'YYYY'), TO_CHAR(FECHATEST,'MM'), TO_CHAR(FECHATEST,'MONTH');

--D
/*Nombre, fecha nacimiento y localidad de los alumnos 
que han realizado todos los Test del Tema SEGURIDAD.*/
/*SELECT CNOMALU,DFECNAC,LOCALIDAD
FROM TEST TS
INNER JOIN TEORICOS T ON T.NNUMTEST = TS.NNUMTEST
INNER JOIN ALUMNOS A ON A.CCODALU=T.CCODALU
WHERE T.NNUMTEST IN (
  SELECT NVL(NNUMTEST,0)qqqq
  FROM TEST
  MINUS
  SELECT NVL(NNUMTEST,0)
  FROM TEST
  WHERE TEMA != 'SEGURIDAD');*/
  
SELECT CNOMALU, DFECNAC, LOCALIDAD
FROM ALUMNOS A
INNER JOIN TEORICOS T ON A.CCODALU=T.CCODALU
INNER JOIN TEST TS ON T.NNUMTEST=TS.NNUMTEST
WHERE TEMA='SEGURIDAD'
GROUP BY CNOMALU, DFECNAC, LOCALIDAD, TEMA
HAVING COUNT(DISTINCT CNOMALU, TEMA) = (
  SELECT COUNT(*)
  FROM TEST
  WHERE TEMA='ASIGNATURA');
  
  
CREATE OR REPLACE VIEW vSeguridad AS
SELECT  CNOMALU, COUNT(DISTINCT T.NNUMTEST) AS NTESTSEGU
FROM ALUMNOS A
INNER JOIN TEORICOS T ON A.CCODALU=T.CCODALU
INNER JOIN TEST TS ON T.NNUMTEST=TS.NNUMTEST
WHERE TEMA='SEGURIDAD'
GROUP BY CNOMALU;

SELECT *
FROM VSEGURIDAD
WHERE NTESTSEGU=(
  SELECT COUNT(*)
  FROM TEST
  WHERE UPPER(TEMA)='SEGURIDAD');
  
--3
CREATE OR REPLACE PROCEDURE sp_Listado_Teoricos(xCODALU VARCHAR2,xNumAprob OUT NUMBER) IS
  xAlumnos ALUMNOS%ROWTYPE;
  
  CURSOR cTests IS SELECT T.*,TEMA,NPREGUNTAS 
                    FROM TEORICOS T 
                    INNER JOIN TEST TS ON T.NNUMTEST=TS.NNUMTEST 
                    WHERE CCODALU=xCODALU;
                    
  xTest cTests%ROWTYPE;
  
BEGIN
  xNumAprob := 0;
  
  SELECT A.* INTO xAlumnos 
  FROM ALUMNOS A 
  WHERE A.CCODALU=xCodAlu;
  
  DBMS_OUTPUT.PUT_LINE( 'NOMBRE' || '  ' ||'FECHA NACIMIENTO'|| '  ' || 'LOCALIDAD');
  DBMS_OUTPUT.PUT_LINE(xAlumnos.CNOMALU || '    ' || xAlumnos.DFECNAC || '          ' || xAlumnos.LOCALIDAD);
  DBMS_OUTPUT.PUT_LINE(RPAD('-',100,'-'));
  
  OPEN cTests;
  LOOP
    FETCH cTests INTO xTest;
    EXIT WHEN CTESTS%NOTFOUND;

    DBMS_OUTPUT.PUT_LINE(RPAD('NNUMTEST',20) || RPAD('TEMA',20) || RPAD('FECHA',20) || RPAD('ACIERTOS',20) || RPAD('FALLOS',20));
    DBMS_OUTPUT.PUT_LINE(RPAD(XTEST.NNUMTEST,20) || RPAD(XTEST.TEMA,20) || RPAD(XTEST.FECHATEST,20) || RPAD(XTEST.NACIERTOS,20) || RPAD(XTEST.NFALLOS,20));
  
    IF (XTEST.NFALLOS < 4 AND XTEST.NPREGUNTAS < 41 ) OR (XTEST.NFALLOS < 6 AND XTEST.NPREGUNTAS > 40) THEN
      xNumAprob := xNumAprob + 1;
      DBMS_OUTPUT.PUT_LINE('EXAMEN APROBADO');
    END IF;
    DBMS_OUTPUT.PUT_LINE(RPAD('-',100,'-'));
  END LOOP;
  CLOSE cTests;
  
  
EXCEPTION
WHEN NO_DATA_FOUND THEN
  DBMS_OUTPUT.PUT_LINE('DATOS NO ENCONTRADOS');
WHEN TOO_MANY_ROWS THEN
  DBMS_OUTPUT.PUT_LINE('DEMASIADOS DATOS ENCONTRADOS');
  
END;


SET SERVEROUTPUT ON;
DECLARE
XNUM NUMBER;
BEGIN
  sp_Listado_Teoricos('1',XNUM);
END;


--4
CREATE OR REPLACE TRIGGER tr_TEORICOS_INSERT
AFTER INSERT ON TEORICOS
FOR EACH ROW
DECLARE
  xPreguntas NUMBER;
  
BEGIN
  SELECT nPREGUNTAS INTO xPreguntas FROM TEST WHERE NNUMTEST=:new.NNUMTEST;
  
  IF (xPreguntas < 41 AND :new.NFALLOS < 4) OR (XPREGUNTAS > 40 AND :new.NFALLOS < 6) THEN
    UPDATE ALUMNOS SET NTESTAPROBADOS = NTESTAPROBADOS + 1 WHERE CCODALU=:new.CCODALU;
  END IF;
  
  
EXCEPTION
WHEN NO_DATA_FOUND THEN
  DBMS_OUTPUT.PUT_LINE('NO SE ENCONTRARON DATOS SOBRE EL EXAMEN');
WHEN TOO_MANY_ROWS THEN
  DBMS_OUTPUT.PUT_LINE('SE ENCONTRARON DEMASIADOS REGISTROS DE ESE EXAMEN');
END;




CREATE OR REPLACE TRIGGER tr_PRACTICOS_UPDATE
AFTER UPDATE ON PRACTICOS
FOR EACH ROW
DECLARE
BEGIN
  IF UPDATING('CCODALU') THEN
    RAISE_APPLICATION_ERROR(-20001,'NO CAMBIAR CLAVE PRIMARIA');
  END IF;
  
  IF :new.NFALLOSLEVES < 3 AND :new.NFALLOSGRAVES = 0 THEN
    UPDATE ALUMNOS SET NPRACTAPROBADAS = NPRACTAPROBADAS + 1 WHERE CCODALU=:new.CCODALU;
  END IF;  
END;




/*CREAR UN TRIGGER PARA QUE NO SE PUEDA BORRAR NINGUN EXAMEN PRACTICO*/

CREATE OR REPLACE TRIGGER tr_PRACTICO_DELETE
AFTER DELETE ON PRACTICOS
BEGIN
  RAISE_APPLICATION_ERROR(-20001,'NO APLICAR DELETE A TABLA PRACTICOS');
END;

INSERT INTO ALUMNOS VALUES('1','NOMBRE',SYSDATE,'GRANADA',3,3);
SELECT * FROM ALUMNOS;
INSERT INTO PRACTICOS VALUES('1',SYSDATE,'1',0,0,0);
INSERT INTO PRACTICOS VALUES('1',SYSDATE,'2',1,1,2);
DELETE PRACTICOS;
SELECT * FROM PRACTICOS;





--3------

CREATE OR REPLACE PROCEDURE spListadoTeoricos(codAlu IN CHAR, numAprob OUT NUMERIC)
IS
  xAlumnos Alumnos%ROWTYPE;
  aprob CHAR(20);
  
  CURSOR cTest
  IS
    SELECT nNumTest, FechaTest, nAciertos, nFallos
    FROM Teoricos
    WHERE cCodAlu = codAlu;
    
  xTest cTest%ROWTYPE;
    
BEGIN  
  numAprob:=0;
  
  SELECT * INTO xAlumnos
    FROM Alumnos 
    WHERE cCodAlu = codAlu;
    
  DBMS_OUTPUT.PUT_LINE('Nombre: '||xAlumnos.cNomAlu);
  DBMS_OUTPUT.PUT_LINE('Nacimiento: '||xAlumnos.dFecNac);
  DBMS_OUTPUT.PUT_LINE('Localidad: '||xAlumnos.Localidad);
  
  OPEN cTest;
  LOOP
    FETCH cTest
    INTO xTest;
    EXIT WHEN cTest%NOTFOUND;
  
    DBMS_OUTPUT.PUT_LINE('Test: '||xTest.nNumTest);
    DBMS_OUTPUT.PUT_LINE('Fecha: '||xTest.FechaTest);
    DBMS_OUTPUT.PUT_LINE('Aciertos: '||xTest.nAciertos);
    DBMS_OUTPUT.PUT_LINE('Fallos: '||xTest.nFallos);

    IF ((xTest.nAciertos+xTest.nFallos)>40) THEN
      IF (xTest.nFallos>5) THEN
        aprob:= 'SUSPENSO';
      ELSE
        aprob:= 'APROBADO';
        numAprob:= numAprob+1;
      END IF;
    ELSE
      IF (xTest.nFallos>4) THEN
        aprob:= 'SUSPENSO';
      ELSE
        aprob:= 'APROBADO';
        numAprob:= numAprob+1;
      END IF;
    END IF;
    DBMS_OUTPUT.PUT_LINE('Resultado: '||aprob);
    
  END LOOP;
  
  DBMS_OUTPUT.PUT_LINE('Examenes Aprobados: '||numAprob);
  
  CLOSE cTest;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('DATOS NO ENCONTRADOS');
    WHEN TOO_MANY_ROWS THEN
      DBMS_OUTPUT.PUT_LINE('DEMASIADOS DATOS ENCONTRADOS');

END;


SET SERVEROUTPUT ON;
DECLARE
xNum NUMBER;
BEGIN
  spListadoTeoricos('GR01',xNum);
END;



